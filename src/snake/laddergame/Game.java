/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package snake.laddergame;

import java.util.ArrayList;
import java.util.Random;
import java.util.Scanner;
/**
 *
 * @author Saad Communication
 */

public class Game {
    int diceValue;  //for storing random values generated by dice
    String difficultyLevel; //difficulty levels based on player's choice
    String winnerName; //for whoever wins the game
    int noOfplayers; //for storing total number of players playing the game
    int[] snakePositions={24,39,47,55,82,88,92,96}; //stores the locations where snake is present
    int[] ladderPositions={2,11,15,25,32,58,60,66,77}; //stores the locations where ladders are present
    Player[] P0 =new Player[4];
    String[] Name1=new String[4];
    String[] name1={"A","B","C","D"};
    
    public Game(String dl, int nOp)  //parameterized constructor of the class Game
    {
        this.difficultyLevel=dl;
        this.noOfplayers=nOp;
    }
    
    public Game(String dl, int nOp, String[] n)
    {
        this.difficultyLevel=dl;
        this.noOfplayers=nOp;
        for(int i=0;i<this.noOfplayers;i++)
        {
            this.Name1[i]=n[i];
        }
    }
    
    public int random(int number) //a function "random" to generate random values for dice
    {
        int r;
        Random ran=new Random();
        r=ran.nextInt(number);
        if(r==0)
        {
            r=random(number);
        }
        return r;
    }
   
    
    
    public Player playerTurn(Player tempPlayer, DFA tempDFA, int playerNumber)
    {
        
        Scanner scan=new Scanner(System.in);
        Player P=new Player();
        P=tempPlayer;
        
            if(Name1[playerNumber]!=null)
            {
                System.out.println(Name1[playerNumber]+"'s Turn : ");
            }
            else
            {
                System.out.println("Player "+name1[playerNumber]+"'s Turn :");
            }
            System.out.print("Press r to roll the dice: ");
            int currentState=0;
            int nextState=0;
            P.blockType="Normal";
            String input=scan.next();
            diceValue=random(7);
            if(P.blockNumber>0)
            {
            System.out.println("\t\t\t\tDice Value : "+diceValue);
            String inp=String.valueOf(diceValue);
            nextState=tempDFA.Transition(currentState,inp);  //transitions for dice value
            if(nextState==2)
            {
                if((P.blockNumber+diceValue)>100)
                {
                    System.out.println("\t\t\t\tDice Value is too high, Can't move");
                }
                else
                {
                P.blockNumber=P.blockNumber+diceValue;
                
                for(int i=0;i<snakePositions.length;i++)
                {
                    if(P.blockNumber==snakePositions[i])
                    {
                        P.blockType="Sn";
                    }
                }
                for(int i=0;i<ladderPositions.length;i++)
                {
                    if(P.blockNumber==ladderPositions[i])
                    {
                        P.blockType="St";
                    }
                }
            }
            }
            else if(nextState==1) //if dice value is 6, player gets an extra chance
            {
                while(diceValue==6)
                {
                    if((P.blockNumber+diceValue)>100)
                    {
                    System.out.println("\t\t\t\tDice Value is too high, Can't move");
                    break;
                    }
                    else
                    {
                    P.blockNumber=P.blockNumber+diceValue;
                    System.out.print("\t\t\t\tRoll dice again, Press r: ");
                    input=scan.next();
                    diceValue=random(7);
                    System.out.println("\t\t\t\tDice Value : "+diceValue);
                    inp=String.valueOf(diceValue);
                    nextState=tempDFA.Transition(currentState,inp);
                    }
                }
                    if((P.blockNumber+diceValue)>100)
                    {
                    }
                    else
                    {
                    P.blockNumber=P.blockNumber+diceValue; 
                    for(int i=0;i<snakePositions.length;i++)
                    {
                        if(P.blockNumber==snakePositions[i])
                        {
                            P.blockType="Sn";
                        }
                    }
                    for(int i=0;i<ladderPositions.length;i++)
                    {
                        if(P.blockNumber==ladderPositions[i])
                        {
                            P.blockType="St";
                        }
                    }
                    }
            }
            currentState=nextState;
            nextState=tempDFA.Transition(currentState, P.blockType);  //transition for snakes and ladders
            if(nextState==3)
            {
                if((P.blockNumber<=20 && "e".equals(difficultyLevel)) || (P.blockNumber<=30 && "m".equals(difficultyLevel)) )
                {
                    System.out.println("\t\t\t\tSnake's Bite, Go to START");
                    P.blockNumber=0;
                }
                else
                {
                    if("e".equals(difficultyLevel))
                    {
                        System.out.println("\t\t\t\tSnake's Bite, Go down 20 blocks");
                        P.blockNumber=P.blockNumber-20;
                    }
                    else if("m".equals(difficultyLevel))
                    {
                        System.out.println("\t\t\t\tSnake's Bite, Go down 30 blocks");
                        P.blockNumber=P.blockNumber-30;
                    }
                    else if("h".equals(difficultyLevel))
                    {
                        int randomSnake=random(35);
                        System.out.println("\t\t\t\tSnake's Bite, Go down "+randomSnake+" blocks");
                        if(P.blockNumber>randomSnake)
                        {
                            P.blockNumber=P.blockNumber-randomSnake;
                        }
                        else
                        {
                            P.blockNumber=0;
                        }
                        
                        for(int i=0;i<ladderPositions.length;i++)
                        {
                            if(P.blockNumber==ladderPositions[i])
                            {
                                System.out.println("\t\t\t\tGreat! You have got a Ladder to climb, Go forward 10 steps");
                                P.blockNumber=P.blockNumber+10;
                            }
                        }
                    }
                }
            }
            else if(nextState==4)
            {
                if((P.blockNumber+20)>=100)
                {
                    System.out.println("\t\t\t\tClimb up the ladder, Go to FINISH");
                    P.blockNumber=100;
                }
                else
                {
                    if("e".equals(difficultyLevel))
                    {
                        System.out.println("\t\t\t\tWow, there is a ladder, Go up 20 blocks");
                        P.blockNumber=P.blockNumber+20;
                    }
                    else if("m".equals(difficultyLevel))
                    {
                        System.out.println("\t\t\t\tWow, there is a ladder, Go up 23 blocks");
                        P.blockNumber=P.blockNumber+23;
                    }
                    else if("h".equals(difficultyLevel))
                    {
                        int randomLadder=random(35);
                        System.out.println("\t\t\t\tWow, there is a ladder, Go up "+randomLadder+" blocks");
                        if((P.blockNumber+randomLadder)<100)
                        {
                            P.blockNumber=P.blockNumber+randomLadder;
                        }
                        else
                        {
                            P.blockNumber=100;
                        }
                        
                        for(int i=0;i<snakePositions.length;i++)
                        {
                            if(P.blockNumber==snakePositions[i])
                            {
                                System.out.println("\t\t\t\tOops! You landed on a Snake after climbing, Go back 10 steps");
                                P.blockNumber=P.blockNumber-10;
                            }
                        }
                    }
                }
            }
            }
            
            
            else  //for a player to get 6 first in order to start game
            {
                P.blockNumber=0;
                if(diceValue==6)
                {
                    if(Name1[playerNumber]!=null)
                    {
                        System.out.println("Dice Value: 6, Now "+Name1[playerNumber]+" can move.");
                    }
                    else
                    {
                        System.out.println("Dice Value: 6, Now Player "+name1[playerNumber]+" can move.");
                    }
                    System.out.print("Again, Press r to roll dice : ");
                    input=scan.next();
                    diceValue=random(7);
                    System.out.println("\t\t\t\tDice Value : "+diceValue);
                    String inp=String.valueOf(diceValue);
                    nextState=tempDFA.Transition(currentState,inp);  //transitions for dice value
                    if(nextState==2)
                    {
                        if((P.blockNumber+diceValue)>100)
                    {
                        System.out.println("\t\t\t\tDice Value is too high, Can't move");
                    }
                    else
                    {
                        P.blockNumber=P.blockNumber+diceValue;
                
                        for(int i=0;i<snakePositions.length;i++)
                        {
                        if(P.blockNumber==snakePositions[i])
                        {
                            P.blockType="Sn";
                        }
                        }
                    for(int i=0;i<ladderPositions.length;i++)
                    {
                        if(P.blockNumber==ladderPositions[i])
                        {
                            P.blockType="St";
                        }
                    }
                    }
                    }
                    else if(nextState==1) //if dice value is 6, player gets an extra chance
                    {
                        while(diceValue==6)
                        {
                            if((P.blockNumber+diceValue)>100)
                            {
                                System.out.println("\t\t\t\tDice Value is too high, Can't move");
                                break;
                            }
                            else
                            {  
                                P.blockNumber=P.blockNumber+diceValue;
                                System.out.print("\t\t\t\tRoll dice again, Press r: ");
                                input=scan.next();
                                diceValue=random(7);
                                System.out.println("\t\t\t\tDice Value : "+diceValue);
                                inp=String.valueOf(diceValue);
                                nextState=tempDFA.Transition(currentState,inp);
                            }
                        }
                        if((P.blockNumber+diceValue)>100)
                        {
                        }
                        else
                        {
                        P.blockNumber=P.blockNumber+diceValue; 
                        for(int i=0;i<snakePositions.length;i++)
                        {
                            if(P.blockNumber==snakePositions[i])
                            {
                                P.blockType="Sn";
                            }
                        }
                        for(int i=0;i<ladderPositions.length;i++)
                        {
                            if(P.blockNumber==ladderPositions[i])
                            {
                                P.blockType="St";
                            }
                        }
                        }
                
            
                    }
            currentState=nextState;
            nextState=tempDFA.Transition(currentState, P.blockType);  //transition for snakes and ladders
            if(nextState==3)
            {
                if((P.blockNumber<=20 && "e".equals(difficultyLevel)) || (P.blockNumber<=30 && "m".equals(difficultyLevel)) )
                {
                    System.out.println("\t\t\t\tSnake's Bite, Go to START");
                    P.blockNumber=0;
                }
                else
                {
                    if("e".equals(difficultyLevel))
                    {
                        System.out.println("\t\t\t\tSnake's Bite, Go down 20 blocks");
                        P.blockNumber=P.blockNumber-20;
                    }
                    else if("m".equals(difficultyLevel))
                    {
                        System.out.println("\t\t\t\tSnake's Bite, Go down 30 blocks");
                        P.blockNumber=P.blockNumber-30;
                    }
                    else if("h".equals(difficultyLevel))
                    {
                        int randomSnake=random(35);
                        System.out.println("\t\t\t\tSnake's Bite, Go down "+randomSnake+" blocks");
                        if(P.blockNumber>randomSnake)
                        {
                            P.blockNumber=P.blockNumber-randomSnake;
                        }
                        else
                        {
                            P.blockNumber=0;
                        }
                        
                        for(int i=0;i<ladderPositions.length;i++)
                        {
                            if(P.blockNumber==ladderPositions[i])
                            {
                                System.out.println("\t\t\t\tGreat! You have got a Ladder to climb, Go forward 10 steps");
                                P.blockNumber=P.blockNumber+10;
                            }
                        }
                    }
                }
            }
            else if(nextState==4)
            {
                if((P.blockNumber+20)>=100)
                {
                    System.out.println("\t\t\t\tClimb up the ladder, Go to FINISH");
                    P.blockNumber=100;
                }
                else
                {
                    if("e".equals(difficultyLevel))
                    {
                        System.out.println("\t\t\t\tWow, there is a ladder, Go up 20 blocks");
                        P.blockNumber=P.blockNumber+20;
                    }
                    else if("m".equals(difficultyLevel))
                    {
                        System.out.println("\t\t\t\tWow, there is a ladder, Go up 23 blocks");
                        P.blockNumber=P.blockNumber+23;
                    }
                    else if("h".equals(difficultyLevel))
                    {
                        int randomLadder=random(35);
                        System.out.println("\t\t\t\tWow, there is a ladder, Go up "+randomLadder+" blocks");
                        if((P.blockNumber+randomLadder)<100)
                        {
                            P.blockNumber=P.blockNumber+randomLadder;
                        }
                        else
                        {
                            P.blockNumber=100;
                        }
                        
                        for(int i=0;i<snakePositions.length;i++)
                        {
                            if(P.blockNumber==snakePositions[i])
                            {
                                System.out.println("\t\t\t\tOops! You landed on a Snake after climbing, Go back 10 steps");
                                P.blockNumber=P.blockNumber-10;
                            }
                        }
                    }
                }
            }
                }
                else
                {
                    System.out.println("Dice Value : "+diceValue);
                    System.out.println("Player Locked.");
                }
            
            }
            
            for(int i=0;i<noOfplayers;i++)  //stores most recent block number of the current player into the player.
            {
                if(playerNumber==i)
                {
                    P0[i]=P;
                }
            }
            
            for(int i=0;i<this.noOfplayers;i++)   //Prints players current blocks according to chosen no of players
            {
                if(P0[i].blockNumber>=100)  //CHECKS WHETHER A PLAYER HAS REACHED THE FINISH LINE
                {
                if(Name1[i]!=null)
                {
                    System.out.println("\t\t\t\t"+Name1[i]+" On : 100th Block");
                    System.out.println("\t\t\t\t"+Name1[i]+" Wins.");
                    this.winnerName=Name1[i];
                }
                else
                {
                    System.out.println("\t\t\t\tPlayer "+name1[i]+" On : 100th Block");
                    System.out.println("\t\t\t\tPlayer "+name1[i]+" Wins");
                    this.winnerName=name1[i];
                }
                }
                else
                {
                if(Name1[i]!=null)
                {
                    System.out.println("\t\t\t\t"+Name1[i]+" On : "+P0[i].blockNumber+"th Block");
                }
                else
                {
                    System.out.println("\t\t\t\tPlayer "+name1[i]+" On : "+P0[i].blockNumber+"th Block");
                }
                }  
            }
        
            return P;
    }
    
    
    public void startGame(int NS,String[] allowChar,ArrayList<int[]> TT,int IS,int[] FS)  //function that starts the game
    {
        DFA dfa=new DFA(NS,allowChar,TT,IS,FS); //object of dfa that passes noOstates, allowed character, transition table, initial and final states into the constructor of dfa class
        
        for(int i=0;i<4;i++)  //initializing players
        {
            P0[i]=new Player();
        }
        
        if(noOfplayers==2)   //TWO PLAYER SNAKE AND LADDER GAME
        {
            InitialBoard(); //to print initial/starting view of the game board
            while(P0[0].blockNumber!=100 && P0[1].blockNumber!=100)  //runs until any one player reaches 100
            {
                P0[0]=playerTurn(P0[0], dfa, 0); //Player A's turn
                
                if(P0[0].blockNumber>=100) //CHECK IF PLAYER A HAS ALREADY WON THEN TERMINATE THE GAME
                {
                    break;
                }
            
                P0[1]=playerTurn(P0[1], dfa, 1); //Player B's Turn
            
           
            } //end of while loop   
        }  //CODE FOR TWO PLAYER GAME ENDS HERE..
        
    
        else if(noOfplayers==3)   //THREE PLAYER SNAKE AND LADDER GAME
        {
            InitialBoard();
            while(P0[0].blockNumber!=100 && P0[1].blockNumber!=100 && P0[2].blockNumber!=100) //runs until any player reaches 100
            {
                P0[0]=playerTurn(P0[0],dfa,0);  //Player A's Turn
                
                if(P0[0].blockNumber>=100) //CHECK IF PLAYER A HAS ALREADY WON THEN TERMINATE THE GAME
                {
                    break;
                }
            
                P0[1]=playerTurn(P0[1],dfa,1); //Player B's Turn 
            
                 if(P0[1].blockNumber>=100) //CHECK IF PLAYER B HAS ALREADY WON THEN TERMINATE THE GAME
                {
                    break;
                }
            
                P0[2]=playerTurn(P0[2], dfa, 2);  //Player C's Turn
            
                if(P0[2].blockNumber>=100)
                {
                    break;
                }
            } //end of while loop
        }  

        else if(noOfplayers==4)   //FOUR PLAYER SNAKE AND LADDER GAME
        {
            InitialBoard();
            while(P0[0].blockNumber!=100 && P0[1].blockNumber!=100 && P0[2].blockNumber!=100 && P0[3].blockNumber!=100) //runs until a player reaches 100
            {
                P0[0]=playerTurn(P0[0],dfa,0);  //Player A's Turn
            
                if(P0[0].blockNumber>=100) //CHECK IF PLAYER A HAS ALREADY WON THEN TERMINATE THE GAME
                {
                    break;
                }
      
                P0[1]=playerTurn(P0[1],dfa,1);  //Player B's Turn 
          
                if(P0[1].blockNumber>=100) //CHECK IF PLAYER B HAS ALREADY WON THEN TERMINATE THE GAME
                {
                    break;
                }
                
                P0[2]=playerTurn(P0[2],dfa,2);  //Player C's Turn
            
                if(P0[2].blockNumber>=100) //CHECK IF PLAYER C HAS ALREADY WON THEN TERMINATE THE GAME
                {
                    break;
                }
                
                P0[3]=playerTurn(P0[3],dfa,3);  //Player D's Turn   
            } //end of while loop
        }   
        FinalBoard();  //To print final view of the game board along with winner name on the 100th block
    }
    
    public void InitialBoard()
    {
        System.out.println("\n\t\t   Intially Board Look Like This: ");
        System.out.println("\t******************************************************************************************************");
        System.out.println("\t*  100     |  99     |  98     |  97     |  96(SN) |  95     |  94     |  93     |  92(SN) |  91     *");
        System.out.println("\t*----------|---------|---------|---------|---------|---------|---------|---------|---------|---------*");
        System.out.println("\t*   81     |  82(SN) |  83     |  84     |  85     |  86     |  87     |  88(SN) |  89     |  90     *");
        System.out.println("\t*----------|---------|---------|---------|---------|---------|---------|---------|---------|---------*");
        System.out.println("\t*   80     |  79     |  78     |  77(LD) |  76     |  75     |  74     |  73     |  72     |  71     *");
        System.out.println("\t*----------|---------|---------|---------|---------|---------|---------|---------|---------|---------*");
        System.out.println("\t*   61     |  62     |  63     |  64     |  65     |  66(LD) |  67     |  68     |  69     |  70     *");
        System.out.println("\t*----------|---------|---------|---------|---------|---------|---------|---------|---------|---------*");   
        System.out.println("\t*   60(LD) |  59     |  58(LD) |  57     |  56     |  55(SN) |  54     |  53     |  52     |  51(LD) *");
        System.out.println("\t*----------|---------|---------|---------|---------|---------|---------|---------|---------|---------*");
        System.out.println("\t*   41     |  42     |  43     |  44     |  45     |  46     |  47(SN) |  48     |  49     |  50     *");
        System.out.println("\t*----------|---------|---------|---------|---------|---------|---------|---------|---------|---------*");
        System.out.println("\t*   40     |  39(SN) |  38     |  37     |  36     |  35     |  34     |  33     |  32     |  31     *");
        System.out.println("\t*----------|---------|---------|---------|---------|---------|---------|---------|---------|---------*");
        System.out.println("\t*   21     |  22     |  23     |  24(SN) |  25(LD) |  26     |  27     |  28     |  29     |  30     *");
        System.out.println("\t*----------|---------|---------|---------|---------|---------|---------|---------|---------|---------*");
        System.out.println("\t*   20     |  19     |  18     |  17     |  16     |  15(LD) |  14     |  13     |  12     |  11(LD) *");
        System.out.println("\t*----------|---------|---------|---------|---------|---------|---------|---------|---------|---------*");
        System.out.println("\t*    1     |   2(LD) |   3     |   4     |   5     |   6     |   7     |   8     |   9     |  10     *");
        System.out.println("\t******************************************************************************************************");
        
        if(noOfplayers==2)
        {
            if(Name1[0]!=null || Name1[1]!=null)
            {
                System.out.println("\t"+noOfplayers+" Players: "+Name1[0]+", "+Name1[1]+".");
            }
            else
            {
                System.out.println("\t"+noOfplayers+" Players: A, B.");
            }
        }
        
        else if(noOfplayers==3)
        {
            if(Name1[0]!=null || Name1[1]!=null || Name1[2]!=null)
            {
                System.out.println("\t"+noOfplayers+" Players: "+Name1[0]+", "+Name1[1]+", "+Name1[2]+".");
            }
            else
            {
                System.out.println("\t"+noOfplayers+" Players: A, B, C.");
            }
        }  
        else if(noOfplayers==4)
        {
            if(Name1[0]!=null || Name1[1]!=null ||Name1[2]!=null || Name1[3]!=null)
            {
                System.out.println("\t"+noOfplayers+" Players: "+Name1[0]+", "+Name1[1]+", "+Name1[2]+", "+Name1[3]+".");
            }
            else
            {
                System.out.println("\t"+noOfplayers+" Players: A, B, C, D.");
            }
        }
    }
    
    public void FinalBoard()
    {
        String temp=winnerName;
        for(int i=0;i<noOfplayers;i++)
        {
            if(Name1[0]!=null)
            {
                if(Name1[i].equals(winnerName))
                {
                    winnerName=name1[i];
                    break;
                }
            }
        }
        
        System.out.println("\n\t\t   After Completion Of The Game, The Board Look Like This:");
        System.out.println("\t******************************************************************************************************");
        System.out.println("\t*  100"+winnerName+"    |  99     |  98     |  97     |  96(SN) |  95     |  94     |  93     |  92(SN) |  91     *");
        System.out.println("\t*----------|---------|---------|---------|---------|---------|---------|---------|---------|---------*");
        System.out.println("\t*   81     |  82(SN) |  83     |  84     |  85     |  86     |  87     |  88(SN) |  89     |  90     *");
        System.out.println("\t*----------|---------|---------|---------|---------|---------|---------|---------|---------|---------*");
        System.out.println("\t*   80     |  79     |  78     |  77(LD) |  76     |  75     |  74     |  73     |  72     |  71     *");
        System.out.println("\t*----------|---------|---------|---------|---------|---------|---------|---------|---------|---------*");
        System.out.println("\t*   61     |  62     |  63     |  64     |  65     |  66(LD) |  67     |  68     |  69     |  70     *");
        System.out.println("\t*----------|---------|---------|---------|---------|---------|---------|---------|---------|---------*");   
        System.out.println("\t*   60(LD) |  59     |  58(LD) |  57     |  56     |  55(SN) |  54     |  53     |  52     |  51(LD) *");
        System.out.println("\t*----------|---------|---------|---------|---------|---------|---------|---------|---------|---------*");
        System.out.println("\t*   41     |  42     |  43     |  44     |  45     |  46     |  47(SN) |  48     |  49     |  50     *");
        System.out.println("\t*----------|---------|---------|---------|---------|---------|---------|---------|---------|---------*");
        System.out.println("\t*   40     |  39(SN) |  38     |  37     |  36     |  35     |  34     |  33     |  32     |  31     *");
        System.out.println("\t*----------|---------|---------|---------|---------|---------|---------|---------|---------|---------*");
        System.out.println("\t*   21     |  22     |  23     |  24(SN) |  25(LD) |  26     |  27     |  28     |  29     |  30     *");
        System.out.println("\t*----------|---------|---------|---------|---------|---------|---------|---------|---------|---------*");
        System.out.println("\t*   20     |  19     |  18     |  17     |  16     |  15(LD) |  14     |  13     |  12     |  11(LD) *");
        System.out.println("\t*----------|---------|---------|---------|---------|---------|---------|---------|---------|---------*");
        System.out.println("\t*    1     |   2(LD) |   3     |   4     |   5     |   6     |   7     |   8     |   9     |  10     *");
        System.out.println("\t******************************************************************************************************");
        
        if(noOfplayers==2)
        {
            if(Name1[0]!=null || Name1[1]!=null)
            {
                System.out.println("\t"+noOfplayers+" Players: "+Name1[0]+", "+Name1[1]+".");
            }
            else
            {
                System.out.println("\t"+noOfplayers+" Players: A, B.");
            }
        }
        else if(noOfplayers==3)
        {
            if(Name1[0]!=null || Name1[1]!=null || Name1[2]!=null)
            {
                System.out.println("\t"+noOfplayers+" Players: "+Name1[0]+", "+Name1[1]+", "+Name1[2]+".");
            }
            else
            {
                System.out.println("\t"+noOfplayers+" Players: A, B, C.");
            }
        }  
        else if(noOfplayers==4)
        {
            if(Name1[0]!=null || Name1[1]!=null ||Name1[2]!=null || Name1[3]!=null)
            {
                System.out.println("\t"+noOfplayers+" Players: "+Name1[0]+", "+Name1[1]+", "+Name1[2]+", "+Name1[3]+".");
            }
            else
            {
                System.out.println("\t"+noOfplayers+" Players: A, B, C, D.");
            }
        }
        if(Name1[0]!=null)
        {
            System.out.println("\t\t "+temp+" is the Winner. \n\t\t Congratulations "+temp);
        }
        else
        {
            System.out.println("\t\t Player "+winnerName+" is the Winner. \n\t\t Congratulations Player "+winnerName);
        }
        }
}